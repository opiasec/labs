import subprocess
import os
import time
import json
import sys

CODE_PATH = ""
TEMPLATE_PATH = ""
APP_URL = ""  # ou usar uma var de env

def run_compose():
    try:
        os.environ.pop("DOCKER_HOST", None)
        subprocess.run(["docker-compose", "up", "-d"], cwd=CODE_PATH, check=True)
        return True
    except subprocess.CalledProcessError:
        return False

def wait_for_app(url, timeout=30):
    for _ in range(timeout):
        try:
            subprocess.run(["curl", "-s", "-f", url], check=True)
            return True
        except subprocess.CalledProcessError:
            time.sleep(1)
    return False

def run_nuclei():
    try:
        result = subprocess.run([
            "nuclei", "-u", APP_URL,
            "-t", TEMPLATE_PATH,
            "-je","results.json",
        ], capture_output=True, text=True, check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print("Erro ao executar nuclei:", e)
        print("Saída de erro:", e.stderr)
        print("Saída padrão:", e.stdout)
        return e.stdout or "{}"

def main():
    if not run_compose():
        print(json.dumps({"score": 0, "message": "Falha ao subir docker-compose"}))
        return

    if not wait_for_app(APP_URL):
        print(json.dumps({"score": 0, "message": "Aplicação não respondeu no tempo esperado"}))
        return

    output = run_nuclei()
    findings = json.loads(output) if output.strip().startswith("{") else {}
    print(output)

    if findings:
        print(json.dumps({
            "score": 0,
            "message": "Exploit detectado com sucesso"
        }))
    else:
        print(json.dumps({
            "score": 100,
            "message": "Nenhuma falha explorável detectada"
        }))

if __name__ == "__main__":
    CODE_PATH = sys.argv[1]
    TEMPLATE_PATH = sys.argv[2]
    #Get form environment variable
    APP_URL = os.getenv("APP_URL")
    main()
